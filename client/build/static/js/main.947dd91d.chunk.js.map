{"version":3,"sources":["murmur_logo.png","firebase.js","components/js/Post.js","components/js/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Post","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","event","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","modalStyle","openSignIn","setOpenSignIn","posts","setPosts","open","setOpen","setUsername","password","setPassword","email","setEmail","setUser","unsub","onAuthStateChanged","authUser","id","post","Modal","onClose","style","Input","createUserWithEmailAndPassword","updateProfile","catch","alert","message","signInWithEmailAndPassword","logo","signOut","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.947dd91d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/murmur_logo.45daa029.png\";","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyBBSadOr9RrJWHYVe5c8Bmi5s3iJWcbEsQ\",\r\n  authDomain: \"murmur-c8a2a.firebaseapp.com\",\r\n  databaseURL: \"https://murmur-c8a2a.firebaseio.com\",\r\n  projectId: \"murmur-c8a2a\",\r\n  storageBucket: \"murmur-c8a2a.appspot.com\",\r\n  messagingSenderId: \"769399185581\",\r\n  appId: \"1:769399185581:web:694753f7c50ca2ca88e624\",\r\n  measurementId: \"G-84R715TSFY\",\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport { db, auth, storage };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../css/Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from \"../../firebase\";\r\nimport { Input } from \"@material-ui/core\";\r\nimport firebase from 'firebase';\r\n\r\nfunction Post({ postId, user, username, caption, imageUrl }) {\r\n  const [comments, setComments] = useState([]);\r\n  const [comment, setComment] = useState([]);\r\n\r\n  // fetch comments\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (postId) {\r\n      unsubscribe = db\r\n        // go into the posts database, then the comments database\r\n        .collection(\"posts\")\r\n        .doc(postId)\r\n        .collection(\"comments\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        // listen to see every comment\r\n        .onSnapshot((snapshot) => {\r\n          setComments(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [postId]);\r\n\r\n  // submit comment to database\r\n  const postComment = (event) => {\r\n    event.preventDefault();\r\n\r\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n      text: comment,\r\n      username: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\r\n    });\r\n    setComment(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"post\">\r\n      {/* header -> avatar + username */}\r\n      <div className=\"post__header\">\r\n        <Avatar\r\n          className=\"post__avatar\"\r\n          alt={username}\r\n          src=\"/static/images/avatar/1.jpg\"\r\n        />\r\n        <h3>{username}</h3>\r\n      </div>\r\n      {/* image */}\r\n      <img className=\"post__image\" src={imageUrl} alt=\"\" />\r\n\r\n      {/* username + caption */}\r\n      <h4 className=\"post__text\">\r\n        <strong>{username}</strong> {caption}\r\n      </h4>\r\n\r\n      <div className=\"post__comments\">\r\n        {comments.map((comment) => (\r\n          <p>\r\n            <strong>{comment.username}</strong> {comment.text}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      {user && (\r\n      <form className=\"post__commentBox\">\r\n        <input\r\n          className=\"post__input\"\r\n          type=\"text\"\r\n          placeholder=\"Add a comment...\"\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"post__button\"\r\n          disabled={!comment}\r\n          type=\"submit\"\r\n          onClick={postComment}\r\n        >\r\n          Post\r\n        </button>\r\n      </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { storage, db } from \"../../firebase.js\";\r\nimport firebase from \"firebase\";\r\nimport \"../css/imageupload.css\";\r\n;\r\nfunction ImageUpload({ username }) {\r\n  const [image, setImage] = useState(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  // fire off event, get the first file you selected, set the image\r\n  const handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n    // on state change, give a snapshot\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        // progress function visuals\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        // Error function ...\r\n        console.log(error);\r\n      },\r\n      () => {\r\n        // complete function\r\n        storage\r\n          .ref(\"images\")\r\n          .child(image.name)\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            // post image inside display:\r\n            db.collection(\"posts\").add({\r\n              // sort posts by time\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n              caption: caption,\r\n              imageUrl: url,\r\n              username: username,\r\n            });\r\n\r\n            setProgress(0);\r\n            setCaption(\"\");\r\n            setImage(null);\r\n          });\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"imageupload\">\r\n      {/* Caption input */}\r\n      {/* File Picker */}\r\n      {/* Post Button */}\r\n\r\n      <progress className=\"imageupload__progress\" value={progress} max=\"100\" />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter a caption...\"\r\n        onChange={(event) => setCaption(event.target.value)}\r\n        value={caption}\r\n      />\r\n      <input type=\"file\" onChange={handleChange} />\r\n      <Button onClick={handleUpload}>Upload</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Post from \"./components/js/Post.js\";\nimport { db, auth } from \"./firebase.js\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./components/js/ImageUpload\";\nimport logo from \"./murmur_logo.png\";\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  // frontend listener\n  useEffect(() => {\n    // backend listener (keeps you logged in)\n    const unsub = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // if user has logged in\n        console.log(authUser);\n        setUser(authUser);\n      } else {\n        // if user has logge out\n        setUser(null);\n      }\n    });\n\n    return () => {\n      // perform cleanup actions before firing code again\n      unsub();\n    };\n  }, [user, username]);\n\n  // useEffect runs piece of code based on specific condition\n  useEffect(() => {\n    // listener, every time a post occurs, this code runs\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        // loop through all documents to find a specific doc\n        setPosts(\n          snapshot.docs.map((doc) => ({\n            id: doc.id,\n            post: doc.data(),\n          }))\n        );\n      });\n  }, []);\n\n  // SIGN UP\n\n  const signUp = (event) => {\n    event.preventDefault();\n\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        return authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  // SIGN IN\n\n  const signIn = (event) => {\n    event.preventDefault();\n\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n    setOpenSignIn(false);\n  };\n\n  return (\n    <div className=\"app\">\n      <Modal\n        open={open}\n        //looks for clicks outside of the modal\n        onClose={() => setOpen(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app_signup\">\n            <Input\n              placeholder=\"username\"\n              type=\"text\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <Button type=\"submit\" onClick={signUp}>\n              Sign Up\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      <Modal\n        open={openSignIn}\n        //looks for clicks outside of the modal\n        onClose={() => setOpenSignIn(false)}\n      >\n        <div style={modalStyle} className={classes.paper}>\n          <form className=\"app_signup\">\n            <Input\n              placeholder=\"email\"\n              type=\"text\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n            <Input\n              placeholder=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n            />\n\n            <Button type=\"submit\" onClick={signIn}>\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Modal>\n\n      {/* Header */}\n      <div className=\"app__header\">\n        <img className=\"app__headerImage\" src={logo} alt=\"Logo\" />\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n          <div className=\"app__loginContainer\">\n            <Button onClick={() => setOpenSignIn(true)}>Sign In</Button>\n            <Button onClick={() => setOpen(true)}>Sign Up</Button>\n          </div>\n        )}\n      </div>\n\n      {/* POSTS */}\n      <div className=\"app__posts\">\n        <div className=\"app__postsLeft\">\n          {posts.map(({ id, post }) => (\n            <Post\n              key={id}\n              postId={id}\n              user={user}\n              username={post.username}\n              caption={post.caption}\n              imageUrl={post.imageUrl}\n            />\n          ))}\n        </div>\n        \n      </div>\n\n      {user?.displayName ? (\n        <ImageUpload username={user.displayName} />\n      ) : (\n        <h3>Login to Post</h3>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}